/*
 * MainNavigationpanel.java
 *
 * Created on __DATE__, __TIME__
 */

package be.camping.campingzwaenepoel.presentation.ui.panels.mainpanel;

import be.camping.campingzwaenepoel.common.enums.SoortHuurderEnum;
import be.camping.campingzwaenepoel.presentation.Controller;
import be.camping.campingzwaenepoel.presentation.dialog.SaveDialog;
import be.camping.campingzwaenepoel.presentation.ui.panels.*;
import be.camping.campingzwaenepoel.service.transfer.KasbonDTO;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.metal.MetalTabbedPaneUI;
import java.awt.*;

/**
 * 
 * @author __USER__
 */
public class MainNavigationpanel extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Controller controller;
	private JTabbedPane jTabbedPane;

	Color colorErrorTab = Color.RED;
	private int oldTab;

	private OpmerkingenPanel opmerkingenPanel;
	private StandplaatsPanel standplaatsPanel;
	private InschrijvingPanel inschrijvingPanel;
	private PersoonPanel persoonPanel;
	private BetalerPanel betalerPanel;
	private KassaPanel kassaPanel;
	private BetalingPanel betalingPanel;
	private ToegelatenAutoPanel toegelatenAutoPanel;
	private ZoekPanel zoekPanel;
	private FotoPanel fotoPanel;
	private StamboomPanel stamboomPanel;
	private InUitPanel inUitPanel;
	private GeschiedenisPanel geschiedenisPanel;
	private TelefoonPanel telefoonPanel;
	private AgendaPanel agendaPanel;
	private RapportenPanel rapportenPanel;
	private PersoonComparisonPanel persoonComparisonPanel;

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	public void initComponents() {

		// Dimension dim = new
		// Dimension(Toolkit.getDefaultToolkit().getScreenSize().width,
		// Toolkit.getDefaultToolkit().getScreenSize().height - 120);
		// this.setSize(dim);
		this.setLayout(new BorderLayout());
		this.add(getJTabbedPane(), BorderLayout.CENTER);
	}// </editor-fold>
		// GEN-END:initComponents

	public JTabbedPane getJTabbedPane() {
		if (jTabbedPane == null) {
			UIManager.put("TabbedPane.selected", Color.BLUE);
			jTabbedPane = new JTabbedPane() {
				/**
				 * 
				 */
				private static final long serialVersionUID = 1L;

				@Override
				public void updateUI() {
					setUI(new ColoredTabbedPaneUI());
				}
			};
			jTabbedPane.setFont(new Font("Lucida Grande", Font.BOLD, 18));
			jTabbedPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);

			jTabbedPane.setTabPlacement(JTabbedPane.LEFT);
			jTabbedPane.setName("Camping Zwaenepoel");
			jTabbedPane.setAlignmentY(LEFT_ALIGNMENT);

			jTabbedPane.addTab("KASSA", null, getKassaPanel(), null);
			jTabbedPane.addTab("OPMERKINGEN", null, getOpmerkingenPanel(), null);
			jTabbedPane.addTab("BETALER", null, getBetalerPanel(), null);
			jTabbedPane.addTab("GROND", null, getStandplaatsPanel(), null);
			jTabbedPane.addTab("INSCHRIJVING", null, getInschrijvingPanel(), null);
			jTabbedPane.addTab("PERSOON", null, getPersoonPanel(), null);
			jTabbedPane.addTab("BETALING", null, getBetalingPanel(), null);
			jTabbedPane.addTab("TOEGELATEN AUTO'S", null, getToegelatenAutoPanel(), null);
			jTabbedPane.addTab("FOTO", null, getFotoPanel(), null);
			jTabbedPane.addTab("STAMBOOM", null, getStamboomPanel(), null);
			// jTabbedPane.addTab("IN/UIT", null, getInUitPanel(), null);
			jTabbedPane.addTab("GESCHIEDENIS", null, getGeschiedenisPanel(), null);
			jTabbedPane.addTab("AGENDA", null, getAgendaPanel(), null);
			jTabbedPane.addTab("TELEFOON", null, getTelefoonPanel(), null);
			jTabbedPane.addTab("RAPPORTEN", null, getRapportenPanel(), null);
			jTabbedPane.addTab("ZOEK", null, getZoekPanel(), null);
			jTabbedPane.addTab("PERSOON VERVANGEN", null, getPersoonComparisonPanel(), null);

			jTabbedPane.addChangeListener(new ChangeListener() {
				// This method is called whenever the selected tab changes
				@Override
				public void stateChanged(ChangeEvent evt) {
					JTabbedPane pane = (JTabbedPane) evt.getSource();
					updateAfterTabChange(pane.getSelectedIndex());
				}
			});
		}
		return jTabbedPane;
	}

	class ColoredTabbedPaneUI extends MetalTabbedPaneUI {
		public void setSelectedTabBackground(Color color) {
			selectColor = color;
		}

		@Override
		protected void paintFocusIndicator(Graphics g, int tabPlacement, Rectangle[] rects, int tabIndex,
				Rectangle iconRect, Rectangle textRect, boolean isSelected) {
		}
	}

	public Controller getController() {
		return controller;
	}

	public void setController(Controller controller) {
		this.controller = controller;
	}

	/**
	 * This method initializes panelOpmerkingen
	 * 
	 * @return javax.swing.JPanel
	 */
	private OpmerkingenPanel getOpmerkingenPanel() {
		if (opmerkingenPanel == null) {
			opmerkingenPanel = new OpmerkingenPanel();
			opmerkingenPanel.initComponents();
		}
		return opmerkingenPanel;
	}

	public void setOpmerkingenPanel(OpmerkingenPanel opmerkingenPanel) {
		this.opmerkingenPanel = opmerkingenPanel;
	}

	public StandplaatsPanel getStandplaatsPanel() {
		if (standplaatsPanel == null) {
			standplaatsPanel = new StandplaatsPanel();
			standplaatsPanel.initComponents();
		}
		return standplaatsPanel;
	}

	public void setStandplaatsPanel(StandplaatsPanel standplaatsPanel) {
		this.standplaatsPanel = standplaatsPanel;
	}

	public InschrijvingPanel getInschrijvingPanel() {
		if (inschrijvingPanel == null) {
			inschrijvingPanel = new InschrijvingPanel();
			inschrijvingPanel.initComponents();
		}
		return inschrijvingPanel;
	}

	public void setInschrijvingPanel(InschrijvingPanel inschrijvingPanel) {
		this.inschrijvingPanel = inschrijvingPanel;
	}

	public PersoonPanel getPersoonPanel() {
		if (persoonPanel == null) {
			persoonPanel = new PersoonPanel();
			persoonPanel.initComponents();
		}
		return persoonPanel;
	}

	public void setPersoonPanel(PersoonPanel persoonPanel) {
		this.persoonPanel = persoonPanel;
	}

	public BetalerPanel getBetalerPanel() {
		if (betalerPanel == null) {
			betalerPanel = new BetalerPanel();
			betalerPanel.initComponents();
		}
		return betalerPanel;
	}

	public void setBetalerPanel(BetalerPanel betalerPanel) {
		this.betalerPanel = betalerPanel;
	}

	public KassaPanel getKassaPanel() {
		if (kassaPanel == null) {
			kassaPanel = new KassaPanel();
			kassaPanel.initComponents();
		}
		return kassaPanel;
	}

	public void setKassaPanel(KassaPanel kassaPanel) {
		this.kassaPanel = kassaPanel;
	}

	public BetalingPanel getBetalingPanel() {
		if (betalingPanel == null) {
			betalingPanel = new BetalingPanel();
			betalingPanel.initComponents();
		}
		return betalingPanel;
	}

	public void setBetalingPanel(BetalingPanel betalingPanel) {
		this.betalingPanel = betalingPanel;
	}

	public ToegelatenAutoPanel getToegelatenAutoPanel() {
		if (toegelatenAutoPanel == null) {
			toegelatenAutoPanel = new ToegelatenAutoPanel();
			toegelatenAutoPanel.initComponents();
		}
		return toegelatenAutoPanel;
	}

	public void setToegelatenAutoPanel(ToegelatenAutoPanel toegelatenAutoPanel) {
		this.toegelatenAutoPanel = toegelatenAutoPanel;
	}

	public ZoekPanel getZoekPanel() {
		if (zoekPanel == null) {
			zoekPanel = new ZoekPanel();
			zoekPanel.initComponents();
		}
		return zoekPanel;
	}

	public void setZoekPanel(ZoekPanel zoekPanel) {
		this.zoekPanel = zoekPanel;
	}

	public FotoPanel getFotoPanel() {
		if (fotoPanel == null) {
			fotoPanel = new FotoPanel();
			fotoPanel.initComponents();
		}
		return fotoPanel;
	}

	public void setFotoPanel(FotoPanel fotoPanel) {
		this.fotoPanel = fotoPanel;
	}

	public StamboomPanel getStamboomPanel() {
		if (stamboomPanel == null) {
			stamboomPanel = new StamboomPanel();
		}
		return stamboomPanel;
	}

	public void setStamboomPanel(StamboomPanel stamboomPanel) {
		this.stamboomPanel = stamboomPanel;
	}

	public InUitPanel getInUitPanel() {
		if (inUitPanel == null) {
			inUitPanel = new InUitPanel();
			inUitPanel.initComponents();
		}
		return inUitPanel;
	}

	public void setInUitPanel(InUitPanel inUitPanel) {
		this.inUitPanel = inUitPanel;
	}

	public GeschiedenisPanel getGeschiedenisPanel() {
		if (geschiedenisPanel == null) {
			geschiedenisPanel = new GeschiedenisPanel();
			geschiedenisPanel.initComponents();
		}
		return geschiedenisPanel;
	}

	public void setGeschiedenisPanel(GeschiedenisPanel geschiedenisPanel) {
		this.geschiedenisPanel = geschiedenisPanel;
	}

	public TelefoonPanel getTelefoonPanel() {
		if (telefoonPanel == null) {
			telefoonPanel = new TelefoonPanel();
		}
		return telefoonPanel;
	}

	public void setTelefoonPanel(TelefoonPanel telefoonPanel) {
		this.telefoonPanel = telefoonPanel;
	}

	public AgendaPanel getAgendaPanel() {
		if (agendaPanel == null) {
			agendaPanel = new AgendaPanel();
			agendaPanel.initComponents();
		}
		return agendaPanel;
	}

	public void setAgendaPanel(AgendaPanel agendaPanel) {
		this.agendaPanel = agendaPanel;
	}

	public RapportenPanel getRapportenPanel() {
		if (rapportenPanel == null) {
			rapportenPanel = new RapportenPanel();
			rapportenPanel.initComponents();
		}
		return rapportenPanel;
	}

	public void setRapportenPanel(RapportenPanel rapportenPanel) {
		this.rapportenPanel = rapportenPanel;
	}

	public PersoonComparisonPanel getPersoonComparisonPanel() {
		if (persoonComparisonPanel == null) {
			persoonComparisonPanel = new PersoonComparisonPanel();
			persoonComparisonPanel.initComponents();
		}
		return persoonComparisonPanel;
	}

	public void setPersoonComparisonPanel(PersoonComparisonPanel persoonComparisonPanel) {
		this.persoonComparisonPanel = persoonComparisonPanel;
	}

	public void setTabColor(boolean ok) {
		int sel = jTabbedPane.getSelectedIndex();
		if (ok) {
			jTabbedPane.setForegroundAt(sel, Color.WHITE);
		} else {
			jTabbedPane.setForegroundAt(sel, colorErrorTab);
		}
	}

	public void checkDataAndUpdateTabInformation() {
		doAllChecks();
		setPanelData();
		int sel = getJTabbedPane().getSelectedIndex();
		boolean ok = checkTab(sel);
		controller.updateDataForTabbedPane(null, ok);
	}

	public boolean changeOk() {
		boolean ret = true;
		if (oldTab == 10 && getGeschiedenisPanel().checkDataChanged()) {
			ret = false;
		}
		return ret;
	}

	private void updateAfterTabChange(int tab) {
		checkTabSaved(oldTab, false);
		jTabbedPane.setForegroundAt(oldTab, null);
		doAllChecks();
		oldTab = tab;
		setPanelData();
		boolean ok = checkTab(tab);
		String tabname = jTabbedPane.getTitleAt(tab);
		controller.updateDataForTabbedPane(tabname, ok);
	}

	public void checkTabSaved(boolean b) {
		int sel = getJTabbedPane().getSelectedIndex();
		checkTabSaved(sel, b);
	}

	public void checkTabSaved(int tab, boolean b) {
		switch (tab) {
		case 1:
			saveOpmerkingen();
			break;
		case 2:
			saveBetaler();
			break;
		case 3:
			saveStandplaats();
			break;
		// case 5 : if (!b) savePersoon(b);
		// break;
		case 6:
			saveBetaling();
			break;
		case 7:
			saveToegelatenAuto();
			break;
		case 8:
			saveFoto();
			break;
		case 9:
			saveStamboom();
			break;
		case 10:
			saveGeschiedenis();
			break;
		case 12:
			saveTelefoon();
			break;
		case 13:
			saveRapporten();
			break;
		}
		// if (b) savePersoon(b);
	}

	private void saveStamboom() {
		if (getStamboomPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getStamboomPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveBetaling() {
		if (getBetalingPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getBetalingPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveToegelatenAuto() {
		if (getToegelatenAutoPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getToegelatenAutoPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveTelefoon() {
		if (getTelefoonPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getTelefoonPanel().save();
			}
			dialog.dispose();
		}
	}

	private void savePersoon(boolean b) {
		getPersoonPanel().checkDataChanged(b);
	}

	private void saveFoto() {
		if (getFotoPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getFotoPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveRapporten() {
		if (getRapportenPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getRapportenPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveBetaler() {
		if (getBetalerPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getBetalerPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveGeschiedenis() {
		if (getGeschiedenisPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getGeschiedenisPanel().save();
			}
			dialog.dispose();
		}
	}

	private void saveStandplaats() {
		if (getStandplaatsPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getStandplaatsPanel().save();
			} else {
				getStandplaatsPanel().resetFieldPanel();
			}
			dialog.dispose();
		}
	}

	private void saveOpmerkingen() {
		if (getOpmerkingenPanel().checkDataChanged()) {
			SaveDialog dialog = new SaveDialog();
			boolean ok = dialog.isUnsavedChanges();
			if (ok) {
				getOpmerkingenPanel().save();
			}
			dialog.dispose();
		}
	}

	public void doAllChecks() {
		if (getOpmerkingenPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(1, null);
			jTabbedPane.setBackgroundAt(1, null);
		} else {
			jTabbedPane.setForegroundAt(1, colorErrorTab);
		}
		if (getBetalerPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(2, null);
			jTabbedPane.setBackgroundAt(2, null);
		} else {
			jTabbedPane.setForegroundAt(2, colorErrorTab);
		}
		if (getStandplaatsPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(3, null);
			jTabbedPane.setBackgroundAt(3, null);
		} else {
			jTabbedPane.setForegroundAt(3, colorErrorTab);
		}
		if (getInschrijvingPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(4, null);
			jTabbedPane.setBackgroundAt(4, null);
		} else {
			jTabbedPane.setForegroundAt(4, colorErrorTab);
		}
		if (getBetalingPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(6, null);
			jTabbedPane.setBackgroundAt(6, null);
		} else {
			jTabbedPane.setForegroundAt(6, colorErrorTab);
		}
		if (getFotoPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(8, null);
			jTabbedPane.setBackgroundAt(8, null);
		} else {
			jTabbedPane.setForegroundAt(8, colorErrorTab);
		}
		if (getGeschiedenisPanel().checkDataForParent()) {
			jTabbedPane.setForegroundAt(10, null);
			jTabbedPane.setBackgroundAt(10, null);
		} else {
			jTabbedPane.setForegroundAt(10, colorErrorTab);
		}
	}

	private boolean checkTab(int tab) {

		boolean checkTab = true;

		switch (tab) {
		case 1:
			checkTab = getOpmerkingenPanel().checkDataForParent();
			break;
		case 2:
			checkTab = getBetalerPanel().checkDataForParent();
			break;
		case 3:
			checkTab = getStandplaatsPanel().checkDataForParent();
			break;
		case 4:
			checkTab = getInschrijvingPanel().checkDataForParent();
			break;
		case 6:
			checkTab = getBetalingPanel().checkDataForParent();
			break;
		case 8:
			checkTab = getFotoPanel().checkDataForParent();
			break;
		case 10:
			checkTab = getGeschiedenisPanel().checkDataForParent();
			break;
		case 13:
			checkTab = getRapportenPanel().checkDataForParent();
			break;
		default:
			checkTab = true;
			break;
		}
		if (checkTab) {
			jTabbedPane.setForegroundAt(tab, Color.WHITE);
		}
		return checkTab;
	}

	public void setPanelData() {
		int sel = getJTabbedPane().getSelectedIndex();
		switch (sel) {
		case 0:
			getKassaPanel().setDataInGUI();
			break;
		case 1:
			getOpmerkingenPanel().setDataInGUI();
			break;
		case 2:
			getBetalerPanel().setDataInGUI();
			break;
		case 3:
			getStandplaatsPanel().setDataInGUI();
			break;
		case 4:
			getInschrijvingPanel().setDataInGUI();
			break;
		case 5:
			getPersoonPanel().setDataInGUI();
			break;
		case 6:
			getBetalingPanel().setDataInGUI();
			break;
		case 7:
			getToegelatenAutoPanel().setDataInGUI();
			break;
		case 8:
			getFotoPanel().setDataInGUI();
			break;
		case 9:
			getStamboomPanel().setDataInGUI();
			break;
		case 10:
			getGeschiedenisPanel().setDataInGUI();
			break;
		case 12:
			getTelefoonPanel().setDataInGUI();
			break;
		case 13:
			getRapportenPanel().setDataInGUI();
			break;
		case 14:
			getZoekPanel().setDataInGUI();
			break;
		default:
			break;
		}
	}

	public void setTab(int index, SoortHuurderEnum soortHuurder) {
		getJTabbedPane().setSelectedIndex(index);
		if (soortHuurder != null && soortHuurder.equals(SoortHuurderEnum.VAST)) {
			getInschrijvingPanel().getJTabbedPane().setSelectedIndex(1);
		} else if (soortHuurder != null && soortHuurder.equals(SoortHuurderEnum.LOS)) {
			getInschrijvingPanel().getJTabbedPane().setSelectedIndex(2);
		}
	}

	public void setKasbonInKassaPanel(KasbonDTO kasbon) {
		getKassaPanel().setDatainGui(kasbon);
	}

}